package console_interpreter;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.Console;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class Console_interpreter_main {
			
	//Echo an input message in the console. Syntax: echo <text:String>
	static void echo (String input_message) throws IOException {
		
		System.out.println("Reply:"+input_message);
		/**Below I just had fun with <code>swing</code> and displayed reply in a pop-up window.
		*The window will appear below all the other windows.*/
		//JOptionPane.showMessageDialog(null, "Reply:"+input_message);
		//key_word = "";
	
	}
	
	//Ping a socket. Syntax: ping <ip-address/domain>
	static void ping (String socket) {
		System.out.println("You are trying to ping: "+socket);
	}
	
	//Login to the server. Syntax: login <username:String> <password:String>
	static void login (String usernameAndPassword) {
		String username = usernameAndPassword.split(" ")[0];
		String password = usernameAndPassword.split(" ")[1];
		System.out.println(username);
		System.out.println(password);
		/**There is also an opportunity to split a line in a <code>for</code> cycle:
		 * <code>
		 * for (String outputString : inputString.split("delimiter", numberOfPartsToSplitTo)) {
		 * System.out.print(outputString);
		 * }
		 * </code>
		 * Or we can put the resulting parts into a string array:
		 * <code>
		 * String[] outputArrayOfStrings = "";
		 * for (String outputString : inputString.split("delimiter", numberOfPartsToSplitTo)) {
		 * outputArrayOfStrings = outputString;
		 * }
		 * </code>
		 */
	}
	
	//Show a list of current users
	static void list () {
		System.out.println("The list of active users:");
	}
	
	//Send a message to selected user. Syntax: msg <name:String> <text:String>
	static void msg () {
		System.out.println("Message sent!");
	}
	
	//Send a file to the specified user. SYntax: file <destinationUser:String> <filename:String>
	/*static void file () {
		
	}*/
	
	//Terminates the program
	static void exit () {
		exitCondition = true;
		System.exit(0);
	}
	
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("Welcome to Console Interpreter by Zenyk!\nPlease type your input below:\n");
		Scanner user_input = new Scanner (System.in);
		String key_word = user_input.next();
		String user_context = user_input.nextLine().trim();
		//System.out.println(key_word);
	    //System.out.println(user_context);
		//user_input.close();
		while (!exitCondition) {
			try {
				if (key_word.equals("echo") || key_word.equals("Echo") || key_word.equals("ECHO")) {
	
					echo(user_context);
	
				}
	
				else if (key_word.equals("ping") || key_word.equals("Ping") || key_word.equals("PING")) {
	
					ping(user_context);
	
				}
				
				else if (key_word.equals("login") || key_word.equals("Login") || key_word.equals("LOGIN")) {
					
					login(user_context);
	
				}
				
				else if (key_word.equals("list") || key_word.equals("List") || key_word.equals("LIST")) {
					
					//list(user_context);
	
				}
				
				else if (key_word.equals("msg") || key_word.equals("Msg") || key_word.equals("MSG")) {
					
					//msg(user_context);
	
				}
				
				else if (key_word.equals("file") || key_word.equals("File") || key_word.equals("FILE")) {
					
					//file(user_context);
	
				}
				
				else if (key_word.equals("exit") || key_word.equals("Exit") || key_word.equals("EXIT")) {
					
					exit();
						
				}
	
				else
					System.out.println("Type a valid command!");
			} 
		    
		    catch (IOException e) {
				// TODO: handle exception
		    	System.err.println("Input error!");
		    	System.exit(1);
			}
		}
	}

	//Privates
	private static Boolean exitCondition = false;
}
